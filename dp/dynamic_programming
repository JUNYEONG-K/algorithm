다이나믹 프로그맹은 메모리를 적절히 사용하여 수행 시간 효울성을 비약적으로 향상시키는 방법이다.
이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다.
다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운 & 바텀업)으로 구성됨. (바텀업이 주 방식임)

자료구조 -> 동적 할당 (프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법
다이나믹 프로그래밍 != 동적할당

< 조건 >
1. 최적 부분 구조 (Optimal Substructure)
    - 큰 문제를 작은 문제로 나눌 수 있으며, 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
2. 중복되는 부분 문제 (Ovverlapping Subproblem)
    - 동일한 작은 문제를 반복적으로 해결한다.


탑다운 -> 메모이제이션 (Memoization) (이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념)
    : 한번 계산한 결과를 메모리 공간에 메모하는 기법
    : 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져온다. (결과 저장용 리스트: DP 테이블)
    : 캐싱 (Caching) 이라고도 불린다.
    (엄밀히 말하면 메모이제이션과 다이나믹 프로그래밍은 다른 개념, 바텀업 방식으로 접근 시, 이미 계산된 결과를 기록하는 방법으로 메모이제이션 활용 가능)


다이나믹 프로그래밍 & 분할 정복(퀵 정렬, 병합정렬, ...)
    - 모두 최적 부분 구조를 가질 때 사용가능
    - 부분 문제의 중복에서 차이 발생
        -> 다이나믹 프로그래밍 문제 => 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복 됨.
        -> 분할 정복 => 동일한 부분 문제가 반복적으로 계산되지 않습니다.


1. 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요!
2. 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토
3. 일단 재귀함수로 비효율적인 완전 탐색 프로그램 작성 후 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드 개선하는 방법 사용
4. 주로 기본 유형의 다이나믹 프로그래밍 문제가 출제됨. (왜냐면 어렵게 내면 너무 어려워서...;)