최단 경로 알고리즘: 가장 짧은 경로를 찾는 알고리즘

각 지점은 그래프에서 노드로 표현
지점 간 연결은 간선(방향과 길이 등 포함)으로 표현

1. 다익스트라 최단 경로 알고리즘
    특정 한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산
    그리디 알고리즘! (매 상황, 가장 비용이 적은 노드를 선택해 임의의 과정을 반복함)
    음의 간선이 없을 때 정상적으로 동작함.

    a. 출발 노드 설정
    b. 최단 거리 테이블 초기화 (무한으로 설정, 자기 자신에 대한 것은 0으로!)
    c. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택
    d. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신
    e. c와 d 반복

   총 O(V)번에 걸쳐 매번 최단 거리가 가장 짧은 노드를 선형 탐색해야 함.
   따라서 전체 시간 복잡도는 O(V^2) 이다.
   노드의 개수가 5,000개 이하라면 ok!! (파이썬->1초 약 20,000,000번 연산 가능)

   우선 순위 큐 (priority queue)
    우선 순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조
    스택 -> 가장 나중에 삽입된 데이터 추출
    큐 -> 가장 먼저 삽입된 데이터 추출
    우선순위 큐 -> 가장 우선순위가 높은 데이터 추출

    최소 힙(Min Heap) & 최대 힙(Max Heap) -> 값이 낮은/높은 데이터부터 추출하는 방식으로 동작
    삽입/삭제 -> O(logN) 시간 복잡도
    (리스트로 우선순위 큐 구현 -> 삽입 O(1), 삭제 (O(N))

    단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 힙(Heap) 자료구조 이용

   우선순위 큐 사용 -> 다익스트라 시간 복잡도 O(ElogV)


2. 플로이드 워셜 알고리즘(Floyd-Warshall)
    모든 노드에서 다른 모든 노드까지의 최단경로를 모두 계산
    다익스트라 알고리즘과 마찬가지로 단계별로 거쳐 가는 노드를 기준으로 알고리즘 수행 (매 단게마다 방문하지 않은 노드 중에 최단 거리를 갖는 노드를 찾는 과정은 필요 없다.)
    2차원 테이블에 최단 거리 정보 저장

    시간 복잡도 => O(N^3)
