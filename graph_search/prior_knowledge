그래프 탐색 알고리즘 (BFS, DFS)
탐색: 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정

!반드시 알아야할 자료구조!
1. 스택 자료구조 (FILO)
    선입후출
    박스쌓기 (입구와 출구가 동일한 형태)
    DFS 방식에서 사용됨

    stack = []
    stack.append(5)
    stack.append(2)
    stack.pop() -> 2 out
    stack.append(3)
    => stack = 5, 3

2. 큐 자료구조 (FIFO)
    선입선출
    식당 줄 서기 (입구와 출구가 뚫려있는 터널 형태)

    // deque 라이브러리 사용 (리스트 자료형을 이용할 수 있지만, 시간 복잡도가 높아 비효율적일 수 있음)
    from collections import deque

    queue = deque()

    queue.append(5)
    queue.append(3)
    queue.append(4)
    queue.popleft() -> 5 out
    queue.append(2)
    => queue = 3, 4, 2

* 재귀함수 (DFS 사용 시 필수)
    : 자기 자신을 다시 호출하는 함수 (recursive function)
    최대 재귀 깊이가 있으므로, 별다른 설정 없이 무한 반복 시 오류메시지와 함께 프로그램이 다운될 것!
    (stack frame 에 함수 정보가 쌓이는 등... 컴퓨터 구조 시간에 배운 거 ㅎㅎ)
    따라서 재귀함수의 종료 조선을 반드시 명시해야함.

    def recursive_function(i):
        if i == 100:
            return
        print(i, '번째 재취함수에서', i + 1, '번째 재귀함수를 호출합니다.')
        recursive_function(i+1)
        print(i, '번째 재귀함수를 종료합니다.')
    recursive_function(1)

    =>  스택 자료구조에 함수의 정보가 쌓임!! (컴퓨터 속 stack frame)
        1번째 재귀함수에서 2번째 재귀함수 호출
        2번째 재귀함수에서 3번째 재귀함수 호출
        3번째 재귀함수에서 4번째 재귀함수 호출
        ...
        99번째 재귀함수에서 100번째 재귀함수 호출
        99번째 재귀함수 종료
        98번째 재귀함수 종료
        ...
        1번째 재귀함수 종료

        ** 재귀함수 넘모 어려웡...
        팩토리얼, 유클리드 호제법(최대공약수) 예제... 등이 있다!
        수학적 귀납법을 그대로 코드에 작성할 수 있다는 장점이 있다.
        모든 재귀함수는 반복문을 이용해서 동일한 기능을 구현할 수 있다. 따라서 신중히 선택하여 사용할 것!
        

