순차 탐색: 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법
이진 탐색: 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법

0, 2, 4, 6, 8, 10, 12, 14 ,16, 18
0  1  2  3  4  5   6   7   8   9

<4 찾기>

1.
시작점 index: 0
끝점 index: 9
중간점 index(소수점 이하 제거): 4

2.
시작점 index: 0
끝점 index: 3
중간점: 1

3.
시작점 index: 2
끝점 index: 3
중간점 index:2 => 값 = 4 완료!!

연산횟수 logN
시간 복잡도 = O(logN) 보장


bisect_left(a, x): 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스를 반환
                    c++ lower bound
bisect_right(a, x): 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 오른쪽 인덱스를 반환
                    c++ upper bound


파라메트릭 서치(parametric search)
    : 최적화 문제를 결정 문제(예 혹은 아니오)로 바꾸어 해결하는 기법
    ex. 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
    (이진 탐색을 활용함!!!)
    